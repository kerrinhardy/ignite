<?php

namespace Tests\Feature;

use App\Permission;
use App\Role;
use App\User;
use App\{{modelName}};
use Illuminate\Foundation\Testing\RefreshDatabase;
use Illuminate\Foundation\Testing\WithFaker;
use Tests\TestCase;

/**
 * @see \App\Http\Controllers\{{modelName}}Controller
 */
class Manage{{modelNamePlural}}Test extends TestCase
{
    use WithFaker, RefreshDatabase;

    protected function setUp(): void
    {
        parent::setUp();
        $this->artisan('db:seed');

        $role_view = factory(Role::class)->create();
        $role_view->givePermissionTo(Permission::where('name', '=', '{{modelNamePluralLowerCase}}-view')->first());
        $this->user_view = factory(User::class)->create();
        $this->user_view->assignRole($role_view);

        $role_create = factory(Role::class)->create();
        $role_create->givePermissionTo(Permission::where('name', '=', '{{modelNamePluralLowerCase}}-create')->first());
        $this->user_create = factory(User::class)->create();
        $this->user_create->assignRole($role_create);

        $role_update = factory(Role::class)->create();
        $role_update->givePermissionTo(Permission::where('name', '=', '{{modelNamePluralLowerCase}}-update')->first());
        $this->user_update = factory(User::class)->create();
        $this->user_update->assignRole($role_update);

        $role_delete = factory(Role::class)->create();
        $role_delete->givePermissionTo(Permission::where('name', '=', '{{modelNamePluralLowerCase}}-delete')->first());
        $this->user_delete = factory(User::class)->create();
        $this->user_delete->assignRole($role_delete);

        $this->user_authenticated = factory(User::class)->create();
    }

    /**
     * @test
     */
    public function an_authorised_user_can_view_the_{{modelNamePluralLowerCase}}_page()
    {
        $response = $this->actingAs($this->user_view)->get(route('{{modelNamePluralLowerCase}}.index'));

        $response->assertOk();
        $response->assertViewIs('{{modelNamePluralLowerCase}}.index');
        $response->assertViewHas('{{modelNamePluralLowerCase}}');
    }

    /**
     * @test
     */
    public function an_authorised_user_can_view_a_{{modelNameSingularLowerCase}}_page()
    {
        ${{modelNameSingularLowerCase}} = factory({{modelName}}::class)->create();

        $response = $this->actingAs($this->user_view)->get(route('{{modelNamePluralLowerCase}}.show', ${{modelNameSingularLowerCase}}));

        $response->assertOk();
        $response->assertViewIs('{{modelNamePluralLowerCase}}.show');
        $response->assertViewHas('{{modelNameSingularLowerCase}}');
    }

    /**
     * @test
     */
    public function an_authorised_user_can_view_the_{{modelNameSingularLowerCase}}_create_page()
    {
        $response = $this->actingAs($this->user_create)->get(route('{{modelNamePluralLowerCase}}.create'));

        $response->assertOk();
        $response->assertViewIs('{{modelNamePluralLowerCase}}.create');
        $response->assertViewHas('{{modelNameSingularLowerCase}}');
        $response->assertViewHas('services_list');
        $response->assertViewHas('lifecycle_list');
    }

    /**
     * @test
     */
    public function an_authorised_user_can_create_a_{{modelNameSingularLowerCase}}()
    {
        $attributes = [
            'name' => $this->faker->word(3),
            'description' => $this->faker->paragraph,
        ];

        $response = $this->actingAs($this->user_create)
            ->post(route('{{modelNamePluralLowerCase}}.store'), $attributes);

        ${{modelNameSingularLowerCase}} = {{modelName}}::where($attributes)->first();

        $response->assertRedirect(${{modelNameSingularLowerCase}}->path());

        $response->assertSessionHas('info-message', "New {{modelName}} added");

        $this->assertDatabaseHas('{{modelNamePluralLowerCase}}', $attributes);

        $this->actingAs($this->user_view)
            ->get(${{modelNameSingularLowerCase}}->path())
            ->assertSee($attributes['name'])
            ->assertSee($attributes['description']);

        $this->get('/{{modelNamePluralLowerCase}}')
            ->assertSee($attributes['name']);

        $this->assertActionUsesFormRequest(
            \App\Http\Controllers\{{modelName}}Controller::class,
            'store',
            \App\Http\Requests\{{modelName}}CreateFormRequest::class
        );
    }

    /**
     * @test
     */
    public function an_authorised_user_can_view_a_{{modelNameSingularLowerCase}}_edit_page()
    {
        ${{modelNameSingularLowerCase}} = factory({{modelName}}::class)->create();

        $response = $this->actingAs($this->user_update)->get(route('{{modelNamePluralLowerCase}}.edit', ${{modelNameSingularLowerCase}}));

        $response->assertOk();
        $response->assertViewIs('{{modelNamePluralLowerCase}}.edit');
        $response->assertViewHas('{{modelNameSingularLowerCase}}');
        $response->assertViewHas('services_list');
        $response->assertViewHas('lifecycle_list');
    }

    /**
     * @test
     */
    public function an_authorised_user_can_edit_a_{{modelNameSingularLowerCase}}()
    {
        ${{modelNameSingularLowerCase}} = factory({{modelName}}::class)->create();

        $response = $this->actingAs($this->user_update)
            ->put(route('{{modelNamePluralLowerCase}}.update', ${{modelNameSingularLowerCase}}), [
                'name'   => 'Changed',
            ]);

        ${{modelNameSingularLowerCase}}->save();

        $response->assertRedirect(${{modelNameSingularLowerCase}}->path());

        $response->assertSessionHas('info-message', "{{modelName}} updated");

        $this->actingAs($this->user_view)
            ->get('/{{modelNamePluralLowerCase}}')
            ->assertSee('Changed');

        $this->assertDatabaseHas('{{modelNamePluralLowerCase}}', ['name' => 'Changed']);

        $this->assertActionUsesFormRequest(
            \App\Http\Controllers\{{modelName}}Controller::class,
            'update',
            \App\Http\Requests\{{modelName}}UpdateFormRequest::class
        );
    }

    /**
     * @test
     */
    public function an_authorised_user_can_delete_a_{{modelNameSingularLowerCase}}()
    {
        ${{modelNameSingularLowerCase}} = factory({{modelName}}::class)->create();
        $this->assertDatabaseHas('{{modelNamePluralLowerCase}}', ${{modelNameSingularLowerCase}}->getAttributes());

        $response = $this->actingAs($this->user_delete)->delete('/{{modelNamePluralLowerCase}}/'.${{modelNameSingularLowerCase}}->id,
            ['_token'=>csrf_token()], []);
        $this->assertSoftDeleted('{{modelNamePluralLowerCase}}', ${{modelNameSingularLowerCase}}->getAttributes());

        $response->assertRedirect('{{modelNamePluralLowerCase}}');
    }

    /**
     * @test
     */
    public function an_authenticated_user_without_permission_cannot_view_the_{{modelNamePluralLowerCase}}_page()
    {
        $response = $this->actingAs($this->user_authenticated)
            ->get(route('{{modelNamePluralLowerCase}}.index'));

        $response->assertForbidden();
    }

    /**
     * @test
     */
    public function an_authenticated_user_without_permission_cannot_view_a_{{modelNameSingularLowerCase}}_page()
    {
        ${{modelNameSingularLowerCase}} = factory({{modelName}}::class)->create();

        $response = $this->actingAs($this->user_authenticated)->get(route('{{modelNamePluralLowerCase}}.show', ${{modelNameSingularLowerCase}}));

        $response->assertForbidden();
    }

    /**
     * @test
     */
    public function an_authenticated_user_without_permission_cannot_view_the_{{modelNameSingularLowerCase}}_create_page()
    {
        $response = $this->actingAs($this->user_authenticated)
            ->get(route('{{modelNamePluralLowerCase}}.create'));

        $response->assertForbidden();
    }

    /**
     * @test
     */
    public function an_authenticated_user_without_permission_cannot_create_a_{{modelNameSingularLowerCase}}()
    {
        $attributes = [
            'name' => $this->faker->sentence(3),
            'description' => $this->faker->paragraph,
        ];

        $this->actingAs($this->user_authenticated)
            ->post(route('{{modelNamePluralLowerCase}}.store'), $attributes)
            ->assertForbidden();

        $this->actingAs($this->user_view)
            ->get('/{{modelNamePluralLowerCase}}')
            ->assertDontSee($attributes['name']);

        $this->assertDatabaseMissing('{{modelNamePluralLowerCase}}', $attributes);
    }

    /**
     * @test
     */
    public function an_authenticated_user_without_permission_cannot_view_a_{{modelNameSingularLowerCase}}_edit_page()
    {
        ${{modelNameSingularLowerCase}} = factory({{modelName}}::class)->create();

        $response = $this->actingAs($this->user_authenticated)
            ->get(route('{{modelNamePluralLowerCase}}.edit', ${{modelNameSingularLowerCase}}));

        $response->assertForbidden();
    }

    /**
     * @test
     */
    public function an_authenticated_user_without_permission_cannot_edit_a_{{modelNameSingularLowerCase}}()
    {
        ${{modelNameSingularLowerCase}} = factory({{modelName}}::class)->create();

        $response = $this->actingAs($this->user_authenticated)
            ->put(route('{{modelNamePluralLowerCase}}.update', ${{modelNameSingularLowerCase}}), [
                'name' => 'Changed',
            ]);

        $response->assertForbidden();

        $this->get('/{{modelNamePluralLowerCase}}')
            ->assertDontSee('Changed');

        $this->assertDatabaseMissing('{{modelNamePluralLowerCase}}', ['name' => 'Changed']);
    }

    /**
     * @test
     */
    public function an_authenticated_user_without_permission_cannot_delete_a_{{modelNameSingularLowerCase}}()
    {
        ${{modelNameSingularLowerCase}} = factory({{modelName}}::class)->create();

        $this->assertDatabaseHas('{{modelNamePluralLowerCase}}', ${{modelNameSingularLowerCase}}->getAttributes());

        $response = $this->actingAs($this->user_authenticated)
            ->delete('/{{modelNamePluralLowerCase}}/'.${{modelNameSingularLowerCase}}->id);

        $response->assertForbidden();

        $this->assertDatabaseHas('{{modelNamePluralLowerCase}}', [
            'id' => ${{modelNameSingularLowerCase}}->id,
            'deleted_at' => null
        ]);
    }

    /**
     * @test
     */
    public function a_guest_cannot_view_the_{{modelNamePluralLowerCase}}_page()
    {
        $response = $this->get(route('{{modelNamePluralLowerCase}}.index'));

        $response->assertRedirect('/login');
    }

    /**
     * @test
     */
    public function a_guest_cannot_view_a_{{modelNameSingularLowerCase}}_page()
    {
        ${{modelNameSingularLowerCase}} = factory({{modelName}}::class)->create();

        $response = $this->get(route('{{modelNamePluralLowerCase}}.show', ${{modelNameSingularLowerCase}}));

        $response->assertRedirect('/login');
    }

    /**
     * @test
     */
    public function a_guest_cannot_view_the_{{modelNameSingularLowerCase}}_create_page()
    {
        $response = $this->get(route('{{modelNamePluralLowerCase}}.create'));

        $response->assertRedirect('/login');
    }

    /**
     * @test
     */
    public function a_guest_cannot_create_a_{{modelNameSingularLowerCase}}()
    {
        $attributes = [
            'name' => $this->faker->sentence(3),
            'description' => $this->faker->paragraph,
        ];

        $this->post(route('{{modelNamePluralLowerCase}}.store'), $attributes)
            ->assertRedirect('/login');

        $this->actingAs($this->user_view)
            ->get('/{{modelNamePluralLowerCase}}')
            ->assertDontSee($attributes['name']);

        $this->assertDatabaseMissing('{{modelNamePluralLowerCase}}', $attributes);
    }

    /**
     * @test
     */
    public function a_guest_cannot_view_a_{{modelNameSingularLowerCase}}_edit_page()
    {
        ${{modelNameSingularLowerCase}} = factory({{modelName}}::class)->create();

        $response = $this->get(route('{{modelNamePluralLowerCase}}.edit', ${{modelNameSingularLowerCase}}));

        $response->assertRedirect('/login');
    }

    /**
     * @test
     */
    public function a_guest_cannot_edit_a_{{modelNameSingularLowerCase}}()
    {
        ${{modelNameSingularLowerCase}} = factory({{modelName}}::class)->create();

        $response = $this->put(route('{{modelNamePluralLowerCase}}.update', ${{modelNameSingularLowerCase}}), [
            'name' => 'Changed',
        ]);

        $response->assertRedirect('/login');

        $this->get('/{{modelNamePluralLowerCase}}')
            ->assertDontSee('Changed');

        $this->assertDatabaseMissing('{{modelNamePluralLowerCase}}', ['name' => 'Changed']);
    }

    /**
     * @test
     */
    public function a_guest_cannot_delete_a_{{modelNameSingularLowerCase}}()
    {
        ${{modelNameSingularLowerCase}} = factory({{modelName}}::class)->create();

        $this->assertDatabaseHas('{{modelNamePluralLowerCase}}', ${{modelNameSingularLowerCase}}->getAttributes());

        $response = $this->delete('/{{modelNamePluralLowerCase}}/'.${{modelNameSingularLowerCase}}->id);

        $this->assertDatabaseHas('{{modelNamePluralLowerCase}}', [
            'id' => ${{modelNameSingularLowerCase}}->id,
            'deleted_at' => null,
        ]);

        $response->assertRedirect('/login');
    }
}
